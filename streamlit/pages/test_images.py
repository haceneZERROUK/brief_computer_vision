import streamlit as st
import requests
from PIL import Image
from io import BytesIO
import base64

"""
Module: D√©tection d'Incendie par URL avec Streamlit

Ce script Streamlit permet aux utilisateurs de soumettre une URL d'image √† une API FastAPI
pour effectuer une d√©tection d'incendie. L'image annot√©e par le mod√®le est ensuite affich√©e
directement sur la page Streamlit.

Fonctionnalit√©s principales :
- Champ de saisie pour l'URL de l'image.
- Appel √† une API FastAPI pour le traitement de l'image.
- Affichage de l'image trait√©e (annot√©e par le mod√®le) directement sur la page.
- Gestion des erreurs courantes (connexion API, format de l'image).
"""

# --- Configuration G√©n√©rale de l'Application ---
# URL de l'API FastAPI pour la d√©tection d'incendie √† partir d'une URL d'image.
# API_URL = "http://localhost:8086/detect_fire_url"     # localhost
API_URL = "http://fastapi:8086/detect_fire_url"       # docker

# --- Configuration de la Page Streamlit ---
#st.set_page_config(layout="centered") # D√©finit la mise en page de l'application Streamlit.
st.title("üî• D√©tection d'incendie via URL d'image") # Titre principal de l'application.

# --- Interface Utilisateur : Saisie de l'URL de l'Image ---
# Champ de texte permettant √† l'utilisateur de coller l'URL d'une image.
img_url = st.text_input("Collez l'URL de l'image √† analyser ici üëá", key="image_url_input")

# Bouton pour d√©clencher le processus de d√©tection.
if st.button("Lancer la d√©tection", help="Cliquez pour envoyer l'image √† l'API et d√©tecter les incendies."):
    # --- Validation de l'entr√©e utilisateur ---
    if not img_url:
        st.error("‚ö†Ô∏è Veuillez entrer une URL d'image valide pour lancer la d√©tection.")
    else:
        # --- Processus d'Envoi √† l'API et R√©ception ---
        # Affiche un spinner pour indiquer que le traitement est en cours.
        with st.spinner("‚è≥ Envoi de l'image √† l'API et traitement..."):
            try:
                # Construit le payload JSON. La cl√© "image_url" doit correspondre au champ
                # attendu par le mod√®le Pydantic de votre API FastAPI (ex: ImageUrlRequest).
                payload = {"image_url": img_url} 

                # Envoie la requ√™te POST √† l'API avec le payload JSON.
                response = requests.post(API_URL, json=payload)
                # L√®ve une exception HTTPError pour les statuts de r√©ponse 4xx ou 5xx.
                response.raise_for_status()

                # Parse la r√©ponse JSON de l'API.
                data = response.json()
                # R√©cup√®re la cha√Æne de caract√®res Base64 de l'image annot√©e depuis la r√©ponse.
                encoded_image_str = data.get("encoded_image")
                # R√©cup√®re la confiance de la d√©tection de feu (si fournie par l'API).
                # fire_confidence = data.get("fire_confidence") # Comment√© car non utilis√© pour l'affichage ici.

                # --- Traitement et Affichage de la R√©ponse de l'API ---
                if encoded_image_str:
                    st.success("‚úÖ D√©tection r√©ussie ! Voici l'image annot√©e :")
                    # D√©code la cha√Æne Base64 en bytes.
                    decoded_image_bytes = base64.b64decode(encoded_image_str)
                    # Ouvre l'image √† partir des bytes d√©cod√©s en utilisant Pillow.
                    img = Image.open(BytesIO(decoded_image_bytes))
                    # Affiche l'image annot√©e dans Streamlit.
                    st.image(img, caption="Image annot√©e par le mod√®le", use_container_width=True)

                    # Vous pourriez ajouter ici un affichage de la confiance si n√©cessaire
                    # if fire_confidence is not None:
                    #     st.info(f"Confiance de d√©tection de feu : {fire_confidence:.2f}")
                else:
                    st.error("‚ùå L'API n'a pas retourn√© d'image encod√©e ou le format est incorrect.")
            
            except requests.exceptions.ConnectionError:
                # G√®re les erreurs de connexion √† l'API (ex: API non lanc√©e, probl√®me r√©seau).
                st.error(f"‚ùå Impossible de se connecter √† l'API. Assurez-vous que FastAPI est bien lanc√© sur {API_URL}")
            except requests.exceptions.HTTPError as e:
                # G√®re les erreurs HTTP retourn√©es par l'API (ex: 400 Bad Request, 500 Internal Server Error).
                # Tente d'extraire des d√©tails d'erreur du corps de la r√©ponse JSON de l'API.
                try:
                    error_detail = response.json().get("detail", "Aucun d√©tail d'erreur fourni.")
                except:
                    error_detail = "Le corps de la r√©ponse n'est pas un JSON valide."
                st.error(f"‚ùå Erreur de l'API (code {response.status_code}): {e}\nD√©tail: {error_detail}")
            except Exception as e:
                # G√®re toute autre exception inattendue.
                st.error(f"Une erreur inattendue s'est produite : {e}")

