import streamlit as st
import cv2
import numpy as np
import requests
import base64
from PIL import Image
from io import BytesIO
import duckdb # Biblioth√®que pour la base de donn√©es int√©gr√©e (DuckDB)
import datetime # Pour g√©rer les timestamps des d√©tections
import time # Pour contr√¥ler la fr√©quence des enregistrements en base de donn√©es

"""
Module: D√©tection d'Incendie par Webcam avec Streamlit

Ce script Streamlit permet de visualiser en temps r√©el la d√©tection d'incendie via une webcam,
en s'appuyant sur un mod√®le de vision par ordinateur expos√© via une API FastAPI.
Les d√©tections de feu d√©passant un certain seuil de confiance sont affich√©es visuellement
sur la page et enregistr√©es dans une base de donn√©es DuckDB locale.

Fonctionnalit√©s principales :
- Capture du flux vid√©o de la webcam en temps r√©el.
- Envoi des images captur√©es √† une API FastAPI pour le traitement et la d√©tection d'objets (feu).
- Affichage du flux vid√©o annot√© (avec les bo√Ætes de d√©tection) directement sur l'interface Streamlit.
- D√©clenchement d'une alerte visuelle (bandeau d'avertissement) sur la page Streamlit
  lorsqu'une d√©tection de feu d√©passe un seuil de confiance pr√©d√©fini.
- Enregistrement des √©v√©nements de d√©tection de feu significatifs (confiance > seuil)
  dans une base de donn√©es DuckDB embarqu√©e, avec une fr√©quence limit√©e pour √©viter le spam.
- Affichage d'un historique des d√©tections enregistr√©es en base de donn√©es.

D√©pendances requises :
- streamlit
- opencv-python
- numpy
- requests
- Pillow (PIL)
- duckdb
"""

# --- Configuration de la Page Streamlit (DOIT √äTRE LA PREMI√àRE COMMANDE STREAMLIT) ---
# st.set_page_config doit √™tre la premi√®re commande Streamlit appel√©e dans le script.
# Elle configure l'apparence g√©n√©rale de la page.
#st.set_page_config(layout="centered") # 'centered' pour un contenu centr√©, 'wide' pour une largeur maximale.
st.title("üî• D√©tection d'incendie en direct via API") # D√©finit le titre principal de l'application affich√© en haut de la page.

# --- Configuration G√©n√©rale de l'Application ---
API_URL_WEBCAM = "http://localhost:8086/detect_fire_webcam" # URL du point de terminaison de l'API FastAPI
                                                           # d√©di√© au traitement des images de la webcam.
#DUCKDB_PATH = "fire_detections.duckdb" # Nom du fichier de la base de donn√©es DuckDB.
                                      # Ce fichier sera cr√©√© localement dans le r√©pertoire d'ex√©cution du script Streamlit.

DUCKDB_PATH = "/app/fire_detections.duckdb"
FIRE_DETECTION_CONFIDENCE_THRESHOLD = 0.4 # Seuil de confiance (valeur entre 0 et 1) au-del√† duquel une d√©tection
                                        # est consid√©r√©e comme un "feu" valide, d√©clenchant l'alerte visuelle
                                        # et l'enregistrement en base de donn√©es.
DB_LOG_INTERVAL_SECONDS = 10 # Intervalle minimal (en secondes) entre deux enregistrements cons√©cutifs
                             # d'une d√©tection de feu dans la base de donn√©es DuckDB.
                             # Cela permet d'√©viter un enregistrement excessif lors d'une d√©tection prolong√©e.

# --- Fonctions de Gestion de la Base de Donn√©es DuckDB ---

@st.cache_resource # D√©corateur Streamlit essentiel pour la gestion des ressources non-Python (comme une connexion BDD).
                   # Il met en cache l'objet retourn√© par la fonction, garantissant que la connexion
                   # n'est √©tablie qu'une seule fois au d√©marrage de l'application et est r√©utilis√©e
                   # lors des reruns Streamlit. La connexion reste ouverte tant que l'application tourne.
def get_db_connection():
    """
    √âtablit et retourne une connexion √† la base de donn√©es DuckDB.
    Si le fichier de base de donn√©es n'existe pas, il est cr√©√©.
    La table 'fire_detections' est √©galement cr√©√©e si elle n'existe pas.

    La connexion √©tant g√©r√©e par `@st.cache_resource`, il est imp√©ratif de NE PAS la fermer
    manuellement (`conn.close()`) apr√®s chaque op√©ration dans les fonctions qui l'utilisent,
    car cela invaliderait la connexion mise en cache pour les futurs appels.

    Returns:
        duckdb.DuckDBPyConnection: Un objet de connexion actif √† la base de donn√©es DuckDB.
    """
    conn = duckdb.connect(database=DUCKDB_PATH) # Connecte √† la base de donn√©es DuckDB.
    conn.execute("""
        CREATE TABLE IF NOT EXISTS fire_detections (
            id VARCHAR PRIMARY KEY,         -- Identifiant unique de la d√©tection (bas√© sur le timestamp pour la tra√ßabilit√©)
            timestamp TIMESTAMP,            -- Horodatage pr√©cis de l'√©v√©nement de d√©tection
            source_type VARCHAR,            -- Type de source de l'image (ex: 'webcam', utile si d'autres sources sont ajout√©es)
            confidence FLOAT                -- Niveau de confiance du mod√®le pour la d√©tection de feu (entre 0 et 1)
        );
    """) # Ex√©cute une requ√™te SQL pour cr√©er la table si elle n'existe pas.
    return conn

def log_fire_detection(confidence: float):
    """
    Enregistre un √©v√©nement de d√©tection de feu dans la base de donn√©es DuckDB.
    Cette fonction int√®gre une logique de temporisation pour limiter la fr√©quence des enregistrements
    en fonction de `DB_LOG_INTERVAL_SECONDS`.

    Args:
        confidence (float): Le niveau de confiance de la d√©tection de feu par le mod√®le.

    Returns:
        str | None: L'identifiant unique de la d√©tection si l'enregistrement a eu lieu avec succ√®s,
                    sinon None si l'enregistrement a √©t√© ignor√© (d√©lai non atteint) ou en cas d'erreur.
    """
    conn = get_db_connection() # R√©cup√®re la connexion DuckDB mise en cache.
    
    # Contr√¥le de la fr√©quence d'enregistrement pour √©viter les entr√©es excessives en BDD.
    current_time = time.time() # Obtient le temps actuel en secondes depuis l'√©poque.
    if 'last_db_log_time' not in st.session_state:
        st.session_state.last_db_log_time = 0.0 # Initialise le temps du dernier log en BDD lors du premier appel.
    
    # V√©rifie si le d√©lai minimum entre les logs est √©coul√©.
    if (current_time - st.session_state.last_db_log_time) >= DB_LOG_INTERVAL_SECONDS:
        try:
            # G√©n√®re un identifiant unique pour cette d√©tection en utilisant l'horodatage pr√©cis.
            detection_id = datetime.datetime.now().strftime("%Y%m%d%H%M%S%f")
            timestamp = datetime.datetime.now() # Horodatage complet pour l'enregistrement.

            # Ex√©cute la requ√™te d'insertion dans la table `fire_detections`.
            conn.execute(
                "INSERT INTO fire_detections (id, timestamp, source_type, confidence) VALUES (?, ?, ?, ?)",
                (detection_id, timestamp, "webcam", confidence)
            )
            st.session_state.last_db_log_time = current_time # Met √† jour le temps du dernier log effectu√©.
            st.success(f"D√©tection de feu (confiance: {confidence:.2f}) enregistr√©e en BDD.") # Message de succ√®s Streamlit.
            return detection_id
        except Exception as e:
            # Affiche un message d'erreur Streamlit si l'enregistrement √©choue.
            st.error(f"Erreur lors de l'enregistrement de la d√©tection de feu : {e}")
            return None
    else:
        # Retourne None si l'enregistrement est ignor√© en raison du d√©lai non atteint.
        return None

# --- Initialisation de la Base de Donn√©es au D√©marrage de l'Application ---
# Ce bloc est ex√©cut√© une fois au lancement de l'application Streamlit.
# Il garantit que le fichier de base de donn√©es DuckDB et sa table sont cr√©√©s
# ou accessibles d√®s le d√©but, avant que les op√©rations de d√©tection ne commencent.
try:
    get_db_connection() # Appelle la fonction pour s'assurer que la BDD est initialis√©e et en cache.
    # La connexion est maintenue ouverte par @st.cache_resource, donc pas de .close() ici.
    st.info(f"Base de donn√©es DuckDB initialis√©e √† : {DUCKDB_PATH}") # Message d'information sur la page.
except Exception as e:
    # Affiche un message d'erreur si l'initialisation de la BDD √©choue (ex: probl√®me de permissions).
    st.error(f"Erreur lors de l'initialisation de la base de donn√©es DuckDB : {e}")

# --- Gestion de l'√âtat de la Webcam et des Donn√©es de Session ---
# st.session_state permet de conserver des variables √† travers les reruns de l'application.
if 'webcam_running' not in st.session_state:
    st.session_state.webcam_running = False # √âtat bool√©en indiquant si la webcam est active.
if 'last_db_log_time' not in st.session_state:
    st.session_state.last_db_log_time = 0.0 # Initialise le timestamp du dernier enregistrement en BDD.

def toggle_webcam():
    """
    Bascule l'√©tat de fonctionnement de la webcam (d√©marr√©e ou arr√™t√©e)
    en modifiant la variable `st.session_state.webcam_running`.
    """
    st.session_state.webcam_running = not st.session_state.webcam_running

# --- Boutons de Contr√¥le de la Webcam ---
# Utilise st.columns pour organiser les boutons c√¥te √† c√¥te.
col1, col2 = st.columns(2) # Cr√©e deux colonnes de largeur √©gale.
with col1:
    # Bouton pour d√©marrer le flux de la webcam et la d√©tection.
    if col1.button("D√©marrer la d√©tection webcam", key="start_webcam"):
        toggle_webcam() # Appelle la fonction pour activer la webcam.
with col2:
    # Bouton pour arr√™ter le flux de la webcam et la d√©tection.
    if col2.button("Arr√™ter la d√©tection webcam", key="stop_webcam"):
        toggle_webcam() # Appelle la fonction pour d√©sactiver la webcam.

# --- Placeholders pour l'Affichage Dynamique de l'Interface Utilisateur ---
# Les placeholders (`st.empty()`) permettent de mettre √† jour des √©l√©ments sp√©cifiques
# de l'interface utilisateur sans avoir √† redessiner toute la page √† chaque rerun,
# am√©liorant ainsi la fluidit√© de l'affichage.
stframe = st.empty() # Placeholder o√π le flux vid√©o de la webcam (annot√©) sera affich√©.
status_message_placeholder = st.empty() # Placeholder pour les messages de statut g√©n√©raux (ex: "Webcam active...", erreurs).

# Placeholder d√©di√© sp√©cifiquement √† l'alerte visuelle de feu.
# Cela garantit qu'une seule alerte de feu est affich√©e √† la fois,
# √©vitant l'accumulation de messages et permettant de l'effacer facilement.
fire_alert_placeholder = st.empty() 

# --- Boucle Principale de Traitement du Flux Vid√©o ---
# Ce bloc de code s'ex√©cute uniquement si la webcam est active (`st.session_state.webcam_running` est True).
if st.session_state.webcam_running:
    cap = cv2.VideoCapture(0) # Initialise l'objet de capture vid√©o pour la webcam par d√©faut (index 0).

    if not cap.isOpened():
        # Affiche une erreur si la webcam n'est pas accessible ou d√©j√† utilis√©e.
        st.error("Impossible d'ouvrir la cam√©ra. Veuillez v√©rifier qu'elle n'est pas d√©j√† utilis√©e ou qu'elle est connect√©e.")
        st.session_state.webcam_running = False # D√©sactive l'√©tat de la webcam pour arr√™ter la boucle.
    else:
        status_message_placeholder.info("Webcam active. Envoi des images √† l'API pour d√©tection...") # Message informatif.
        while st.session_state.webcam_running: # Boucle continue tant que la webcam est cens√©e √™tre active.
            ret, frame = cap.read() # Lit une frame du flux vid√©o de la webcam. `ret` est un bool√©en (succ√®s), `frame` est l'image.
            if not ret:
                status_message_placeholder.warning("Impossible de r√©cup√©rer une image de la cam√©ra.")
                continue # Passe √† l'it√©ration suivante de la boucle si la lecture de la frame √©choue.
            
            # --- Pr√©traitement de l'Image pour l'API ---
            # Convertit le format de couleur de l'image de BGR (utilis√© par OpenCV) en RGB (attendu par PIL et YOLO).
            frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            img_pil = Image.fromarray(frame_rgb) # Convertit le tableau NumPy (repr√©sentation de l'image) en objet Image PIL.

            # Encode l'image en format Base64 pour qu'elle puisse √™tre transmise via une requ√™te JSON HTTP.
            buffered = BytesIO() # Cr√©e un buffer en m√©moire pour stocker les donn√©es de l'image.
            img_pil.save(buffered, format="JPEG") # Sauvegarde l'image PIL dans le buffer au format JPEG.
            img_base64 = base64.b64encode(buffered.getvalue()).decode("utf-8") # Encode les bytes du buffer en Base64 et les d√©code en cha√Æne UTF-8.

            payload = {"image_data": img_base64} # Construit le dictionnaire de donn√©es (payload) √† envoyer √† l'API.

            # --- Appel √† l'API FastAPI et Traitement de la R√©ponse ---
            try:
                response = requests.post(API_URL_WEBCAM, json=payload, timeout=5) # Envoie la requ√™te POST √† l'API. Un timeout de 5 secondes est d√©fini.
                response.raise_for_status() # V√©rifie si la requ√™te a r√©ussi (code statut 2xx). L√®ve une HTTPError sinon.

                data = response.json() # Parse le corps de la r√©ponse JSON de l'API.
                encoded_image_from_api = data.get("encoded_image") # Extrait la cha√Æne Base64 de l'image annot√©e.
                fire_confidence = data.get("fire_confidence") # Extrait le niveau de confiance de la d√©tection de feu.

                # --- Affichage de l'Image Annot√©e et Logique d'Alerte/Enregistrement ---
                # V√©rifie si l'API a bien retourn√© une image encod√©e valide (non vide et de type cha√Æne de caract√®res).
                if encoded_image_from_api and isinstance(encoded_image_from_api, str):
                    # D√©code l'image Base64 re√ßue de l'API en bytes.
                    decoded_image_bytes = base64.b64decode(encoded_image_from_api)
                    # Ouvre les bytes d√©cod√©s comme une image PIL.
                    annotated_img_pil = Image.open(BytesIO(decoded_image_bytes))
                    # Affiche l'image annot√©e dans le placeholder Streamlit d√©di√© au flux vid√©o.
                    stframe.image(annotated_img_pil, channels="RGB", use_container_width=True, caption="D√©tection en direct")
                    
                    # Logique conditionnelle bas√©e sur la confiance de d√©tection de feu.
                    if fire_confidence is not None and fire_confidence >= FIRE_DETECTION_CONFIDENCE_THRESHOLD:
                        # Si un feu est d√©tect√© avec une confiance suffisante.
                        status_message_placeholder.success(f"üî• Feu d√©tect√© avec une confiance de : {fire_confidence:.2f} !")
                        
                        # ALERTE VISUELLE UNIQUE SUR LA PAGE STREAMLIT : Met √† jour le contenu du placeholder d'alerte.
                        fire_alert_placeholder.warning(f"üö® ALERTE FEU ! Confiance : {fire_confidence:.2f} - V√©rifiez la situation !")

                        # Enregistre la d√©tection dans la base de donn√©es DuckDB (respecte l'intervalle de temps).
                        log_fire_detection(confidence=fire_confidence)
                        
                    elif fire_confidence is not None and fire_confidence < FIRE_DETECTION_CONFIDENCE_THRESHOLD:
                         # Si une d√©tection de feu est pr√©sente mais sous le seuil d'alerte.
                         status_message_placeholder.info(f"D√©tection de feu (confiance: {fire_confidence:.2f}) en dessous du seuil d'alerte.")
                         fire_alert_placeholder.empty() # Efface toute alerte visuelle pr√©c√©dente.
                    else:
                        # Si aucun feu n'est d√©tect√© (fire_confidence est None ou non pertinent).
                        status_message_placeholder.info("Pas de feu d√©tect√© pour cette frame.")
                        fire_alert_placeholder.empty() # Efface l'alerte visuelle.
                else:
                    # G√®re le cas o√π l'API ne retourne pas une image encod√©e valide.
                    status_message_placeholder.warning("L'API n'a pas retourn√© une image encod√©e ou le format est incorrect.")
                    fire_alert_placeholder.empty() # Efface l'alerte visuelle.
            
            except requests.exceptions.ConnectionError:
                # G√®re les erreurs de connexion au serveur de l'API.
                status_message_placeholder.error("Impossible de se connecter √† l'API. Assurez-vous que FastAPI est lanc√©.")
                st.session_state.webcam_running = False # Arr√™te la boucle de la webcam.
                fire_alert_placeholder.empty() # Efface l'alerte.
            except requests.exceptions.Timeout:
                # G√®re les erreurs de timeout si l'API ne r√©pond pas dans le d√©lai imparti.
                status_message_placeholder.warning("La requ√™te √† l'API a expir√©. Le traitement prend peut-√™tre trop de temps.")
                fire_alert_placeholder.empty() # Efface l'alerte.
            except requests.exceptions.HTTPError as e:
                # G√®re les erreurs HTTP (4xx, 5xx) renvoy√©es par l'API.
                # Tente d'extraire les d√©tails de l'erreur du corps de la r√©ponse JSON de l'API.
                error_detail = response.json().get("detail", "Aucun d√©tail d'erreur fourni.")
                status_message_placeholder.error(f"Erreur de l'API (code {response.status_code}): {e}\nD√©tail: {error_detail}")
                st.session_state.webcam_running = False # Arr√™te la boucle de la webcam.
                fire_alert_placeholder.empty() # Efface l'alerte.
            except Exception as e:
                # Capture et affiche toute autre exception inattendue.
                status_message_placeholder.error(f"Une erreur inattendue s'est produite lors du traitement de la frame : {e}")
                st.session_state.webcam_running = False # Arr√™te la boucle de la webcam.
                fire_alert_placeholder.empty() # Efface l'alerte.
            
            # --- Contr√¥le du Flux Vid√©o ---
            # Attend 1ms pour permettre √† OpenCV de traiter les √©v√©nements (n√©cessaire pour garder la fen√™tre r√©active)
            # et pour contr√¥ler le taux de rafra√Æchissement des frames.
            cv2.waitKey(1)

# --- Instructions et Nettoyage si la Webcam est Arr√™t√©e ---
else:
    status_message_placeholder.info("Cliquez sur 'D√©marrer la d√©tection webcam' pour lancer la diffusion.")
    fire_alert_placeholder.empty() # S'assure que l'alerte visuelle est effac√©e lorsque la webcam est inactive.

# S'assure de lib√©rer la ressource de la cam√©ra lorsque l'application Streamlit se termine
# ou lorsque la section de la webcam n'est plus active.
if 'cap' in locals() and cap.isOpened():
    cap.release()

# --- Section pour Visualiser l'Historique des D√©tections ---
st.header("Historique des d√©tections de feu") # Titre de la section d√©di√©e √† l'historique.
# Bouton pour rafra√Æchir l'affichage du tableau des d√©tections enregistr√©es.
if st.button("Actualiser l'historique"):
    conn = get_db_connection() # R√©cup√®re la connexion √† la base de donn√©es.
    # Ex√©cute une requ√™te SQL pour r√©cup√©rer toutes les d√©tections, tri√©es par horodatage d√©croissant.
    # .fetchdf() convertit le r√©sultat en un DataFrame Pandas pour un affichage facile.
    df = conn.execute("SELECT * FROM fire_detections ORDER BY timestamp DESC").fetchdf()
    if not df.empty:
        st.dataframe(df) # Affiche le DataFrame des d√©tections dans Streamlit.
    else:
        st.info("Aucune d√©tection enregistr√©e pour le moment.") # Message si la base de donn√©es est vide.
